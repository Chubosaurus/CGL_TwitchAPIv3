using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using CGL;
using CGL.TwitchModels;

namespace UT_WINFORMS
{
    public partial class MainForm : Form
    {
        CGL.TwitchAPIv3 TwitchAPI = new TwitchAPIv3();

        public MainForm()
        {
            InitializeComponent();
            SetupTwitchAPI();
        }

        /// <summary>
        /// Setup TwitchAPI to use developer's information.
        /// </summary>
        private void SetupTwitchAPI()
        {
            TwitchAPI.BaseApiUri = new Uri("https://api.twitch.tv/kraken/");
            TwitchAPI.ClientId = "29o143sskq8vdbqni90ms9d5pk68cnf";
            TwitchAPI.OAuthToken = "0nn1x0nlmc595v9jmfchdusyv898bo";
            TwitchAPI.TwitchCallbackUri = new Uri("http://www.chubosaurus.com");
            TwitchAPI.ChannelName = "chubosaurus";
        }

        /// <summary>
        /// Start the Unit Test(s).
        /// </summary>
        private async void StartUnitTests_Button_Click(object sender, EventArgs e)
        {
            // check busy flag
            if (IsBusy)
            {
                return;
            }

            IsBusy = true;
            TwitchAPI_Output.Clear();

            //T NAME = DoUnitTest<T>(() => TwitchAPI.FUNC, "NAME", UpdateStatus);
            TwitchAPI_Output.AppendText("Starting Tests...\r\n");
            TwitchBlockedUser_Response ADD_BLOCK_USER = await DoUnitTest<TwitchBlockedUser_Response>(() => TwitchAPI.AddUserToBlockList("agriasz"), "ADD_BLOCK_USER", UpdateStatus);
            TwitchBlockUserList_Response GET_BLOCK_LIST = await DoUnitTest<TwitchBlockUserList_Response>(() => TwitchAPI.GetUserBlockList(), "GET_BLOCK_LIST", UpdateStatus);

            TwitchPostList_Response GET_CHANNEL_POST = await DoUnitTest<TwitchPostList_Response>(() => TwitchAPI.GetChannelPosts("chubosaurus"), "GET_CHANNEL_POST", UpdateStatus);
            TwitchPostList_Response GET_AUTH_CHANNEL_POST = await DoUnitTest<TwitchPostList_Response>(() => TwitchAPI.GetAuthenticatedChannelPosts(), "GET_AUTH_CHANNEL_POST", UpdateStatus);
            TwitchPostTweet_Response POST_CHANNEL_POST = await DoUnitTest<TwitchPostTweet_Response>(() => TwitchAPI.PostChannelPost(string.Format("TESTING API@{0}", DateTime.Now.ToShortDateString())), "POST_CHANNEL_POST", UpdateStatus);

            TwitchPost_Response GET_CHANNEL_POST_BY_ID = null;
            TwitchPost_Response GET_CHANNEL_AUTH_POST_BY_ID = null;
            TwitchPost_Response DELETE_CHANNEL_POST_BY_ID = null;
            TwitchPostReaction_Response POST_CHANNEL_POST_REACTION = null;

            if (POST_CHANNEL_POST != null)
            {
                GET_CHANNEL_POST_BY_ID = await DoUnitTest<TwitchPost_Response>(() => TwitchAPI.GetPostById(TwitchAPI.ChannelName, POST_CHANNEL_POST.Post.Id), "GET_CHANNEL_POST", UpdateStatus);
                GET_CHANNEL_AUTH_POST_BY_ID = await DoUnitTest<TwitchPost_Response>(() => TwitchAPI.GetAuthenticatedPostById(POST_CHANNEL_POST.Post.Id), "GET_CHANNEL_AUTH_POST_BY_ID", UpdateStatus);
                POST_CHANNEL_POST_REACTION = await DoUnitTest<TwitchPostReaction_Response>(() => TwitchAPI.PostChannelReaction(TwitchAPI.ChannelName, POST_CHANNEL_POST.Post.Id), "POST_CHANNEL_POST_REACTION", UpdateStatus);
                bool DELETE_CHANNEL_POST_REACTION = await DoUnitTest<bool>(() => TwitchAPI.DeleteChannelReaction(TwitchAPI.ChannelName, POST_CHANNEL_POST.Post.Id), "DELETE_CHANNEL_POST_REACTION", UpdateStatus);
                DELETE_CHANNEL_POST_BY_ID = await DoUnitTest<TwitchPost_Response>(() => TwitchAPI.DeletePostById(POST_CHANNEL_POST.Post.Id), "DELETE_CHANNEL_POST_BY_ID", UpdateStatus);
            }

            TwitchLinks GET_CHAT_ENDPOINTS = await DoUnitTest<TwitchLinks>(() => TwitchAPI.GetChatEndPoints(), "GET_CHAT_ENDPOINTS", UpdateStatus);
            TwitchBadge_Response GET_CHAT_BADGES = await DoUnitTest<TwitchBadge_Response>(() => TwitchAPI.GetChatBadges(), "GET_CHAT_BADGES", UpdateStatus);
            TwitchEmoticonList_Response GET_CHAT_EMOTICONS = await DoUnitTest<TwitchEmoticonList_Response>(() => TwitchAPI.GetChatEmoticons(), "GET_CHAT_EMOTICONS", UpdateStatus);
            TwitchEmoticonImageList_Response GET_CHAT_EMOTICON_IMAGES = await DoUnitTest<TwitchEmoticonImageList_Response>(() => TwitchAPI.GetChatEmoticonImages(), "GET_CHAT_EMOTICON_IMAGES", UpdateStatus);
            TwitchEmoticonSet_Response GET_CHAT_EMOTICON_SET = await DoUnitTest<TwitchEmoticonSet_Response>(() => TwitchAPI.GetChatEmoticonSet("0,496"), "GET_CHAT_EMOTICON_SET", UpdateStatus);
            IsBusy = false;
        }

        /// <summary>
        /// Update the output box with status.
        /// </summary>
        /// <param name="input">The input object (either a response from an operation, or a status title").</param>
        /// <param name="mode">The mode (0 = Status Title, 1 = Response from an operation)</param>
        /// <returns>Return the status of the calling operation.</returns>
        private bool UpdateStatus(object input, int mode = 0)
        {
            switch (mode)
            {
                case 0:
                    TwitchAPI_Output.AppendText(string.Format("{0}...", input.ToString()));
                    return true;
                case 1:
                default:
                    if (input == null)
                    {
                        TwitchAPI_Output.AppendText("[FAIL]\r\n");
                        return false;
                    }
                    else
                    {
                        TwitchAPI_Output.AppendText("[SUCCESS]\r\n");
                        return true;
                    }
            }
        }

        /// <summary>
        /// Helper function to do the Unit Test.
        /// </summary>
        /// <typeparam name="T">The return Type.</typeparam>
        /// <param name="function">The function to call.</param>
        /// <param name="title">The title of the test.</param>
        /// <param name="update_call_back">The call back to perform before and after the operation.</param>
        /// <returns>Returns T on success, else null.</returns>
        private async Task<T> DoUnitTest<T>(Func<Task<T>> function, string title, Func<object, int, bool> update_callback)
        {
            update_callback(title, 0);
            T ret = default(T);
            ret = await Task.Run(function);
            //Task<T> task = Task.Run(function);
            //ret = task.Result;
            

            if (ret is bool)
            {
                if((bool)Convert.ChangeType(ret, typeof(bool)) == true)
                {
                    update_callback(ret, 1);
                }
                else
                {
                    update_callback(null, 1);
                }
            }
            else
            {
                update_callback(ret, 1);
            }            
            return ret;
        }

        /// <summary>
        /// True when the Unit Tests functions are running, else fasle.
        /// </summary>
        public bool IsBusy { get; set; }
    }
}
